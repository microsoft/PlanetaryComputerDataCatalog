import React from "react";
import ButtonLink from "../controls/ButtonLink";
import { FontIcon } from "@fluentui/react";
import { mergeStyles } from "@fluentui/react/lib/Styling";

const iconClass = mergeStyles({
  fontSize: 12,
  margin: 5,
  paddingTop: 2,
  fontWeight: "600 !important",
});

const baseUrl = "../../";

const hasLink = link => {
  return link && link !== baseUrl;
};

// Render prev and next links for a doc topic
const TopicNav = ({ topic, prev, next }) => {
  // The hrefs generated by sphinx don't account for our in-app routing, so infer
  // the correct path and reformat the href to point to the correct resource. The link
  // refers either to a page in the existing topic (../next-article/) or a page in a new
  // topic (../../new-topic/next-article).
  const reformatHref = href => {
    if (!href) return;

    const pathNav = /\.\.\//g;
    const numDirs = href.match(pathNav).length;
    if (numDirs === 2) {
      // New topic, strip off the relative directory portion
      return `/docs/${href.replace(pathNav, "")}`;
    } else if (numDirs === 1) {
      return `/docs/${topic}/${href.replace(pathNav, "")}`;
    }
    return href;
  };

  return (
    <div
      style={{
        display: "flex",
        justifyContent: "space-between",
        width: "75%",
        marginBottom: 40,
      }}
    >
      <div style={{ visibility: hasLink(prev?.link) ? "visible" : "hidden" }}>
        <ButtonLink to={reformatHref(prev?.link)} title={`Previous: ${prev?.title}`}>
          <FontIcon iconName="ChevronLeft" className={iconClass} />
          {prev?.title}
        </ButtonLink>
      </div>
      <div style={{ visibility: hasLink(next?.link) ? "visible" : "hidden" }}>
        <ButtonLink to={reformatHref(next?.link)} title={`Next: ${next?.title}`}>
          {next?.title}
          <FontIcon iconName="ChevronRight" className={iconClass} />
        </ButtonLink>
      </div>
    </div>
  );
};

export default TopicNav;
